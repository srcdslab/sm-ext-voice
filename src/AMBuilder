# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

projectName = 'Voice'

project = builder.LibraryProject(projectName)
project.sources += [
  os.path.join(Extension.ext_root, 'src', 'extension.cpp'),
  os.path.join(Extension.ext_root, 'src', 'ringbuffer.cpp'),
  os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp')
]

for sdk_name in Extension.sdks:
  sdk = Extension.sdks[sdk_name]
  if sdk['name'] in ['mock']:
    continue

  for cxx in builder.targets:
    if not cxx.target.arch in sdk['platforms'][cxx.target.platform]:
      continue

    binary = Extension.HL2ExtConfig(project, builder, cxx, projectName + '.ext.' + sdk['extension'], sdk)

    Extension.AddCDetour(binary)

    if sdk['name'] in ['csgo']:
      binary.compiler.cxxincludes += [
        os.path.join(Extension.protobuf_root, 'include'),
        os.path.join(Extension.protobuf_valve_root),
      ]
      binary.compiler.postlink += [
        '-L' + os.path.join(Extension.protobuf_root, 'lib'),
        '-lprotobuf'
      ]

      binary.sources += [
        os.path.join(Extension.protobuf_valve_root, 'csgo', 'netmessages.pb.cc'),
      ]

    binary.compiler.cxxincludes += [
      os.path.join(Extension.ext_root, 'src', 'celt')
    ]
    # TODO: add proper linux support for x64
    if cxx.target.arch in ['x86'] and cxx.target.platform in ['linux']:
      binary.compiler.linkflags += [
        os.path.join(Extension.ext_root, 'src', 'celt', 'libcelt0.a')
      ]
    # TODO: add proper windows support for celt
    if cxx.target.platform in ['windows']:
      binary.compiler.linkflags += ['/FORCE:UNRESOLVED']

Extension.extensions += builder.Add(project)
